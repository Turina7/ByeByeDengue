generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  status        String
  role          String
  imageUrl      String        @default("https://mugjkckn6xaf3d21.public.blob.vercel-storage.com/forum/00afdcce-458c-4dea-b694-80cb6d88cf59-CLy5b9sPwQsBABMU7BwwiEBUJPCAOn.jpg")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  feedbacks     Feedback[]
  forumMessages ForumMessage[]
  comments      Comment[]
  reports       Report[]
  articles      Article[]
}

model Report {
  id              Int       @id @default(autoincrement())
  protocol        String    @unique
  createdAt       DateTime  @default(now())
  resolvedAt      DateTime?
  userId          Int
  focusType       String
  description     String
  location        String
  observationDate DateTime
  status          String
  fileUrl         String?
  fileDescription String?
  user            User      @relation(fields: [userId], references: [id])
}


model Feedback {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime @default(now())
  userId      Int
  feedback    String
  user        User     @relation(fields: [userId], references: [id])
}

model ForumMessage {
  id          Int       @id @default(autoincrement())
  userId      Int
  message     String
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String
  section     String
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
}

model Comment {
  id          Int          @id @default(autoincrement())
  content     String
  postId      Int
  userId      Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      String       @default("active")
  post        ForumMessage @relation(fields: [postId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  imageUrl    String?
  summary     String
  description String
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String
  section     String
  keywords    String
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  summary     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String
  category    String
  section     String
  keywords    String
  userId      Int
}